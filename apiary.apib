FORMAT: 1A

# LoL Improve API
LoL Improve APIARY is the documentation and mocking tool used inside the LoL Improve web application.

This is **no public API**, though, and **CORS is not allowed**, except on the mocking prototype.

## Notes

### **`current user`**
Refers to an entity representing a **logged in user**, stored in the session and known *server side*.

When an API call is based of the **current user** you don't need to provide anything in your request's body but **need to authentificate** first, though.

In the case where the request is **unauthentificated**, a **`403 Forbidden`** will be given as a response.

# Group Users
Users related resources for the **LoLImprove API**

## Users [/users]
Users collection related actions

### List all users [GET]
**\<Authentificated>** Get a list of all the users

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "avatar": "https://avatars0.githubusercontent.com/u/1383633?v=3&s=100",
                "email": "support@lolimprove.com",
                "password": "$2a$10$1V8eNHwClr3wcuPXwfE9G.x.e8yodjsuiJPVa9wtkJXbpwge12s32",
                "name": "Diacred",
                "league": "Gold V",
                "role": null,
                "life_points": 235,
                "verified": true,
                "last_request_at": "2014-11-19 10:34:02",
                "analyses_ids": [4, 5, 6],
                "replay_ids": [4],
                "created_at": "2014-11-12 18:55:18",
                "updated_at": "2014-11-19 10:34:02"
            },
            {
                "id": 2,
                "avatar": "https://avatars3.githubusercontent.com/u/9674065?v=3&s=100",
                "email": "support@lolimprove.com",
                "password": "$2a$10$1V8eNHwClr3wcuPXwfE9G.x.e8yodjsuiJPVa9wtkJXbpwge12s32",
                "name": "Klock",
                "league": "Challenger",
                "role": null,
                "life_points": 135,
                "verified": false,
                "last_request_at": "2014-11-19 10:34:02",
                "analyses_ids": [1, 2, 3],
                "replay_ids": [1, 2, 3],
                "created_at": "2014-11-12 18:55:18",
                "updated_at": "2014-11-19 10:34:02"
            }
        ]


### Create an user [POST]
Creates a new user

+ Request (application/json)

        {
            "avatar": "https://avatars0.githubusercontent.com/u/1383633?v=3&s=100",
            "email": "support@lolimprove.com",
            "password": "$2a$10$1V8eNHwClr3wcuPXwfE9G.x.e8yodjsuiJPVa9wtkJXbpwge12s32",
            "name": "Diacred"
        }

+ Response 201 (application/json)

        {
            "id": 1,
            "avatar": "https://avatars0.githubusercontent.com/u/1383633?v=3&s=100",
            "email": "support@lolimprove.com",
            "password": "$2a$10$1V8eNHwClr3wcuPXwfE9G.x.e8yodjsuiJPVa9wtkJXbpwge12s32",
            "name": "Diacred",
            "league": "Gold V",
            "role": null,
            "life_points": 0,
            "verified": false,
            "last_request_at": "2014-11-12 18:55:18",
            "analyses_ids": [],
            "replay_ids": [],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-19 10:34:02"
        }

## User [/users/{id}]
An user entity and it's actions

+ Parameters
    + id (required, number) ... Numeric id of the user to retrieve

### Fetch an user [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "avatar": "https://avatars0.githubusercontent.com/u/1383633?v=3&s=100",
            "email": "support@lolimprove.com",
            "password": "$2a$10$1V8eNHwClr3wcuPXwfE9G.x.e8yodjsuiJPVa9wtkJXbpwge12s32",
            "name": "Diacred",
            "league": "Gold V",
            "role": null,
            "life_points": 235,
            "verified": true,
            "last_request_at": "2014-11-19 10:34:02",
            "analyses_ids": [2, 3],
            "replay_ids": [1, 2, 3],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-19 10:34:02"
        }

### Update an user [PUT]
**\<Authentificated>** Update an user's attributes. Some attributes should not be updated through this *API* and therefore only a few can be included :
- avatar
- email
- password

When trying to update an inaccessible attribute a **Status 403** will be returned.

+ Request (application/json)

        {
            "avatar": "https://avatars0.githubusercontent.com/u/1383633?v=3&s=100",
            "email": "lolimprove@lolimprove.com"
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "avatar": "https://avatars0.githubusercontent.com/u/1383633?v=3&s=100",
            "email": "lolimprove@lolimprove.com",
            "password": "$2a$10$1V8eNHwClr3wcuPXwfE9G.x.e8yodjsuiJPVa9wtkJXbpwge12s32",
            "name": "George",
            "league": "Gold V",
            "role": null,
            "life_points": 235,
            "verified": true,
            "last_request_at": "2014-11-19 10:34:02",
            "analyses_ids": [2, 3],
            "replay_ids": [1, 2, 3],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-19 10:34:02"
        }

# Group Replays
Replays related resources for the **LoLImprove API**

## Replays [/replays]
### List all Replays [GET]
+ Response 200 (application/json)

        [
            {
                "id": 1,
                "user_id": 1,
                "video_id": "QMujSbIkF8M",
                "lane": "mid",
                "champion": "syndra",
                "matchup": "ahri",
                "victory": true,
                "kda": "17/4/8",
                "description": "I struggled a lot during the laning phase and didn't ward at all. When and where should I had warded ?",
                "duration": "25:01",
                "patch": "4.19",
                "replay_file": null,
                "analyses_ids": [1, 2, 3],
                "created_at": "2014-11-12 16:35:18",
                "updated_at": "2014-11-12 16:35:18"
            },
            {
                "id": 2,
                "user_id": 2,
                "video_id": "QMujSbIkF8M",
                "lane": "mid",
                "champion": "ahri",
                "matchup": "zed",
                "victory": false,
                "kda": "1/4/8",
                "description": "I did a lot during the laning phase but didn't ward at all. When and where should I had warded ?",
                "duration": "63:01",
                "patch": "4.16",
                "replay_file": null,
                "analyses_ids": [4, 5, 6],
                "created_at": "2014-11-12 18:55:18",
                "updated_at": "2014-11-19 10:34:02"
            }
        ]

### Create a Replay [POST]
**\<Authentificated>** Creates a new replay for the **current user**

+ Request (application/json)

        {
            "user_id": 2,
            "video_id": "QMujSbIkF8M",
            "lane": "mid",
            "champion": "ahri",
            "matchup": "zed",
            "victory": false,
            "kda": "1/4/8",
            "description": "I did a lot during the laning phase but didn't ward at all. When and where should I had warded ?",
            "duration": "63:01",
            "patch": "4.16",
            "replay_file": null
        }

+ Response 201 (application/json)

        {
            "id": 2,
            "user_id": 2,
            "video_id": "QMujSbIkF8M",
            "lane": "mid",
            "champion": "ahri",
            "matchup": "zed",
            "victory": false,
            "kda": "1/4/8",
            "description": "I did a lot during the laning phase but didn't ward at all. When and where should I had warded ?",
            "duration": "63:01",
            "patch": "4.16",
            "replay_file": null,
            "analyses_ids": [],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-19 10:34:02"
        }

## Replay [/replays/{id}]
A replay entity and it's actions

+ Parameters
    + id (required, number) ... Numeric id of the replay to retrieve

### Fetch a replay [GET]
+ Response 200 (application/json)

        {
            "id": 2,
            "user_id": 2,
            "video_id": "QMujSbIkF8M",
            "lane": "mid",
            "champion": "ahri",
            "matchup": "zed",
            "victory": false,
            "kda": "1/4/8",
            "description": "I did a lot during the laning phase but didn't ward at all. When and where should I had warded ?",
            "duration": "63:01",
            "patch": "4.16",
            "replay_file": null,
            "analyses_ids": [1, 2, 3],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-19 10:34:02"
        }

### Update a replay [PUT]
**\<Authentificated>** Updates the **current user**'s replay

+ Request (application/json)

        {
            "description": "Hello, world",
            "kda": "2/4/8"
        }

+ Response 200 (application/json)

        {
            "id": 2,
            "user_id": 2,
            "video_id": "QMujSbIkF8M",
            "lane": "mid",
            "champion": "ahri",
            "matchup": "zed",
            "victory": false,
            "kda": "2/4/8",
            "description": "Hello, world",
            "duration": "63:01",
            "patch": "4.16",
            "replay_file": null,
            "analyses_ids": [1, 2, 3],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-19 10:34:02"
        }

### Remove a Replay [DELETE]
**\<Authentificated>** Removes a replay from the **current user**'s.

+ Response 204


# Group Analysis

## Analyses [/replays/{replay_id}/analyses/]
Nested replay analyses

+ Parameters
    + replay_id (required, number) ... Numeric id of the replay that holds our analyses

### List analyses [GET]
Fetches a list of analyses for a replay, for the given ids.

+ Request (application/json)

        {
            "analyses_ids": [1]
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "replay_id": 1,
            "user_id": 2,
            "votes": 15,
            "status": "pending",
            "general_note_id": 3,
            "timeline_entries_ids": [1, 2, 3],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-19 10:39:02"
        }

### Create an analysis [POST]
**\<Authentificated>** Creates a new replay for the **current user**.

Only the `replay_id` and the `user_id` are needed in order to create a new unpublished analysis.

**/!\** An analysis is unique replay-user-wise. An user can only analyse a replay once. Otherwise a **status 500** will be handed back. **/!\**

+ Request (application/json)

        {
            "replay_id": 1,
            "user_id": 2
        }

+ Response 200 (application/json)

        {
            "id": 2,
            "replay_id": 2,
            "user_id": 1,
            "votes": 0,
            "status": "pending",
            "general_note_id": null,
            "timeline_entries_ids": [],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-19 10:39:02"
        }


## Analysis [/replays/{replay_id}/analyses/{id}]
Nested replay analysis

+ Parameters
    + id (required, number) ... Numeric id of the analysis
    + replay_id (required, number) ... Numeric id of the replay that holds our analyses


### Fetch analysis [GET]
**\<Authentificated>** Get the specified analysis.

+ Parameters
    + id (required, number) ... Numeric id of the analysis

+ Response 200 (application/json)

        {
            "id": 1,
            "replay_id": 1,
            "user_id": 2,
            "votes": 15,
            "status": "pending",
            "general_note_id": 3,
            "timeline_entries_ids": [1, 2, 3],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-19 10:39:02"
        }

### Remove an analysis [DELETE]
**\<Authentificated>** Removes an analysis from the **current user**'s.

+ Response 204

## Publish [/replays/{replay_id}/analyses/{id}/publish]

+ Parameters
    + id (required, number) ... Numeric id of the analysis

### Publish an analysis [PATCH]
**\<Authentificated>** Publish the specified **current user**'s analysis.

For an analysis to be published, it needs to have at least the **general note** set, otherwise a **status 500** will be handed back.

+ Response 200 (application/json)

        {
            "id": 2,
            "replay_id": 2,
            "user_id": 1,
            "votes": 0,
            "status": "published",
            "general_note_id": 1,
            "timeline_entries_ids": [1, 2, 3],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-19 10:39:02"
        }


## Upvote [/replays/{replay_id}/analyses/{id}/upvote]

+ Parameters
    + id (required, number) ... Numeric id of the analysis

### Upvote an analysis [PATCH]
**\<Authentificated>** Upvotes the specified **current user**'s analysis.

For an analysis to be upvotes it needs to be **published**. Otherwise a **status 500** will be handed back.

+ Response 200 (application/json)

        {
            "id": 2,
            "replay_id": 2,
            "user_id": 1,
            "votes": 1,
            "published": true,
            "general_note_id": 1,
            "timeline_entries_ids": [1, 2, 3],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-19 10:39:02"
        }

## Downvote [/replays/{replay_id}/analyses/{id}/downvote]

+ Parameters
    + id (required, number) ... Numeric id of the analysis

### Downvote an analysis [PATCH]
**\<Authentificated>** Downvotes the specified **current user**'s analysis.

For an analysis to be downvoted it needs to be **published**. Otherwise a **status 500** will be handed back.

+ Response 200 (application/json)

        {
            "id": 2,
            "replay_id": 2,
            "user_id": 1,
            "votes": 0,
            "published": true,
            "general_note_id": 1,
            "timeline_entries_ids": [1, 2, 3],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-19 10:39:02"
        }

# Group Analysis#General Note
A general note is a **unique** entity that belongs to an analysis.
It represents the general comments one would have concerning a replay.

A general note **deletion** can only occur when the **associated replay is destroyed**.

## General note [/analyses/{analysis_id}/general_note/{id}]
A general note is **unique** for an analysis and created on behalf of the **current user**.

+ Parameters
    + analysis_id (required, number) ... Numeric id of the analysis
    + id (required, number) ... Numeric id of the general note

### Fetch the general note [GET]
Fetch the general note associated with an analysis.

+ Response 200 (application/json)

        {
            "id": 1,
            "analysis_id": 1,
            "user_id": 1,
            "content": "I am a general comment, hey !",
            "comments_ids": [1, 2],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-15 10:39:02"
        }

## General notes [/analyses/{analysis_id}/general_note]

### Create the general note [POST]
**\<Authentificated>** Create a replay on behalf of the **current user**'s.
Notice the`analysis_id` in the response. Take care for it is only a complementary information.

It's actually the `Analysis entity` that holds the `general_note_id`.

+ Request (application/json)

        {
            "content": "I am a general comment, hey !"
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "analysis_id": 1,
            "user_id": 1,
            "content": "I am a general comment, hey !",
            "comments_ids": [],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-15 10:39:02"
        }

### Update the general note [PUT]
**\<Authentificated>** Only the **content** attribute can be updated.
You don't need to pass the `general_note_id` as it is inferred from the replay's has_one relation.

+ Request (application/json)

        {
            "content": "I am an updated general comment, hey !"
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "analysis_id": 1,
            "user_id": 1,
            "content": "I am an updated general comment, hey !",
            "comments_ids": [1, 2],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-15 10:39:02"
        }

# Group Analysis#Timeline Entries
An analysis can have **multiple timeline entries**. A timeline entry represents a comment one would have at a specific time in the replay.

## Timeline [/analyses/{analysis_id}/timeline/entries]

+ Parameters
    + analysis_id (required, number) ... Numeric id of the analysis

### List Timeline entries [GET]
Fetch the Timeline entries associated with an analysis for the given ids.

+ Request (application/json)

        {
            "timeline_entries_ids": [1, 2]
        }

+ Response 200 (application/json)

        [
             {
                "id": 1,
                "analysis_id": 1,
                "user_id": 1,
                "time": "02:55",
                "content": "I am a timeline entry !",
                "comments_ids": [1, 2],
                "created_at": "2014-11-12 18:55:18",
                "updated_at": "2014-11-15 10:39:02"
            },
            {
                "id": 2,
                "analysis_id": 1,
                "user_id": 1,
                "time": "05:43",
                "content": "I am an other timeline entry !",
                "comments_ids": [1, 2],
                "created_at": "2014-11-12 18:55:18",
                "updated_at": "2014-11-15 10:39:02"
            }
        ]


### Create a new Timeline entry [POST]
A Timeline entry is always created on behalf of the **current user**.

**\<Authentificated>**

+ Request (application/json)

        {
            "time": "02:55",
            "content": "I am a timeline entry !"
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "analysis_id": 1,
            "user_id": 2,
            "time": "02:55",
            "content": "I am a timeline entry !",
            "comments_ids": [],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-15 10:39:02"
        }

## Timeline entry [/analyses/{analysis_id}/timeline/entries/{id}]
A Timeline entry is always updated on behalf of the **current user**.

+ Parameters
    + analysis_id (required, number) ... Numeric id of the analysis
    + id (required, number) ... Numeric id of the entry

### Get an entry [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "analysis_id": 1,
            "user_id": 2,
            "time": "02:58",
            "content": "I am a timeline entry !",
            "comments_ids": [1, 2],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-15 10:39:02"
        }

### Update an entry [PUT]
**\<Authentificated>** Both the `time` and `content` attributes can be modified.

+ Request (application/json)

        {
            "time": "02:58",
            "content": "I am an updated timeline entry !"
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "analysis_id": 1,
            "user_id": 2,
            "time": "02:58",
            "content": "I am an updated timeline entry !",
            "comments_ids": [1, 2],
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-15 10:39:02"
        }


### Remove a Timeline entry [DELETE]
**\<Authentificated>** Removes a Timeline entry from the **current user**'s.

+ Response 204


# Group Comments

## Comments [/comments]

### List all comments for a ressource [GET]
Get a list of comments for a ressource for given ids.

+ Request (application/json)

        {
            "comments_ids": [1, 2]
        }

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "user_id": 1,
                "commentable_id": 1,
                "type": "analysis",
                "content": "This is an example of speech !",
                "votes": 5,
                "reports": 0,
                "created_at": "2014-11-12 18:55:18",
                "updated_at": "2014-11-15 10:39:02"
            },
            {
                "id": 2,
                "user_id": 2,
                "commentable_id": 1,
                "type": "analysis",
                "content": "This is an other example of speech !",
                "votes": 5,
                "reports": 0,
                "created_at": "2014-11-12 18:58:18",
                "updated_at": "2014-11-15 10:36:02"
            }
        ]

### Create a new comment for a ressource [POST]
**\<Authentificated>** Creates a comment for a given ressource on behalf of the **current user**..

+ Request (application/json)

        {
            "type": "analysis",
            "content": "This is an example of speech !"
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "user_id": 1,
            "commentable_id": 1,
            "type": "analysis",
            "content": "This is an example of speech !",
            "votes": 0,
            "reports": 0,
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-15 10:39:02"
        }

## Comment [/comments/{id}]

+ Parameters
    + id (required, number) ... Numeric id of the comment


### Fetch a comment [GET]
Fetch a comment

+ Response 200 (application/json)

        {
            "id": 1,
            "user_id": 1,
            "commentable_id": 1,
            "type": "analysis",
            "content": "This is an example of speech !",
            "votes": 0,
            "reports": 0,
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-15 10:39:02"
        }


### Update a comment [PUT]
**\<Authentificated>** Updates a comment on behalf of the **current user**.

You may only update the `content` attribute.

+ Request (application/json)

        {
            "content": "This is an updated example of speech !"
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "user_id": 1,
            "commentable_id": 1,
            "type": "analysis",
            "content": "This is updated an example of speech !",
            "votes": 0,
            "reports": 0,
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-15 10:39:02"
        }

### Remove a comment [DELETE]
**\<Authentificated>** Removes a comment from the **current user**'s.

+ Response 204

## Upvote [/comment/{id}/upvote]

+ Parameters
    + id (required, number) ... Numeric id of the comment

### Upvote a comment [PATCH]
**\<Authentificated>** Upvotes a comment on behalf of the **current user**.

+ Response 200 (application/json)

        {
            "id": 1,
            "user_id": 1,
            "commentable_id": 1,
            "type": 'analysis',
            "content": "This is an example of speech !",
            "votes": 1,
            "reports": 0,
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-15 10:39:02"
        }

## Downvote [/comment/{id}/downvote]

+ Parameters
    + id (required, number) ... Numeric id of the comment

### Downvote a comment [PATCH]
**\<Authentificated>** Downvotes a comment on behalf of the **current user**.

+ Response 200 (application/json)

        {
            "id": 1,
            "user_id": 1,
            "commentable_id": 1,
            "type": 'analysis',
            "content": "This is an example of speech !",
            "votes": 0,
            "reports": 0,
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-15 10:39:02"
        }

# Group Reports

## Reports [/reports{?replay_id,analysis_id,comment_id,user_id}]
You **must** provide **either** a `replay_id`, an `analysis_id`, a `comment_id` or a `user_id`.

Providing none or providing multiple ones will result in a **status 500**.

+ Parameters
    + replay_id (optional, number) ... Numeric id of the replay
    + analysis_id (optional, number) ... Numeric id of the analysis
    + comment_id (optional, number) ... Numeric id of the comment
    + user_id (optional, number) ... Numeric id of the user

### List all the reports for a ressource [GET]
**\<Authentificated>**

+ Response 200 (application/json)

        {
            "id": 1,
            "reportable_id": 1,
            "type": 'analysis',
            "user_id": 2,
            "category": "troll",
            "message": "The video is a video of My Little Pony",
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-15 10:39:02"

        }

## Reports [/reports]

### Create a report for a ressource [POST]
**\<Authentificated>** A report is always created on behalf of the **current user**.

When an analysis is reported it's status will be set to **"reported"**. Only published analyses are to be displayed.

The type of the ressource to report (i.e : 'comment', 'analysis') must be specified.


+ Request (application/json)

        {
            "type": "analysis",
            "category": "troll",
            "message": "The video is a video of My Little Pony"
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "reportable_id": 1,
            "type": 'analysis',
            "user_id": 2,
            "category": "troll",
            "message": "The video is a video of My Little Pony",
            "created_at": "2014-11-12 18:55:18",
            "updated_at": "2014-11-15 10:39:02"

        }